{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Problem 1: Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is governed by Newton's laws and can be modeled by decomposing the motion into horizontal and vertical components. Given: - Initial velocity: \\( \\(v_0\\) \\) - Angle of projection: \\( \\(\\theta\\) \\) - Gravitational acceleration: \\( \\(g\\) \\) The equations of motion in a vacuum and with no air resistance are: Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ The time of flight is obtained by solving \\( \\(y(t) = 0\\) \\) : \\[ t_{total} = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Using this, the range (horizontal distance traveled before hitting the ground) is: \\[ R = v_0 \\cos(\\theta) \\cdot t_{total} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This equation shows a nonlinear dependence on angle, with a maximum range at \\( \\(\\theta = 45^\\circ\\) \\) for ideal conditions. 2. Analysis of the Range We analyze the range \\( \\(R\\) \\) as a function of the angle of projection \\( \\(\\theta\\) \\) using: \\[ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Max range: Occurs when \\( \\(\\sin(2\\theta) = 1\\) \\) , i.e., \\( \\(\\theta = 45^\\circ\\) \\) . Effect of velocity: Range increases quadratically with initial velocity. Effect of gravity: Range decreases inversely with gravitational acceleration. 3. Practical Applications In real-world situations: - Air resistance reduces range and shifts optimal angle < \\( \\(45^\\circ\\) \\) . - Uneven terrain alters landing height, changing total time of flight. - Wind can either assist or hinder horizontal displacement. - Applications include sports (e.g., basketball, soccer), military ballistics, and spaceflight trajectory planning. 4. Implementation Below is a Python implementation to visualize how the range depends on the angle of projection. Python Code import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0 = 30 # m/s (initial velocity) # Angle values from 0\u00b0 to 90\u00b0 angles_deg = np.linspace(0, 90, 500) angles_rad = np.radians(angles_deg) # Compute range for each angle ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Plotting plt.figure(figsize=(10, 6)) plt.plot(angles_deg, ranges, color='blue', label=f'v0 = {v0} m/s') plt.axvline(45, color='red', linestyle='--', label='Max range at 45\u00b0') plt.title('Projectile Range vs Angle of Projection', fontsize=16) plt.xlabel('Angle (degrees)', fontsize=14) plt.ylabel('Range (meters)', fontsize=14) plt.grid(True, linestyle='--', alpha=0.7) plt.legend() plt.tight_layout() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is governed by Newton's laws and can be modeled by decomposing the motion into horizontal and vertical components. Given: - Initial velocity: \\( \\(v_0\\) \\) - Angle of projection: \\( \\(\\theta\\) \\) - Gravitational acceleration: \\( \\(g\\) \\) The equations of motion in a vacuum and with no air resistance are: Horizontal displacement: $$ x(t) = v_0 \\cos(\\theta) \\cdot t $$ Vertical displacement: $$ y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2 $$ The time of flight is obtained by solving \\( \\(y(t) = 0\\) \\) : \\[ t_{total} = \\frac{2 v_0 \\sin(\\theta)}{g} \\] Using this, the range (horizontal distance traveled before hitting the ground) is: \\[ R = v_0 \\cos(\\theta) \\cdot t_{total} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This equation shows a nonlinear dependence on angle, with a maximum range at \\( \\(\\theta = 45^\\circ\\) \\) for ideal conditions.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"We analyze the range \\( \\(R\\) \\) as a function of the angle of projection \\( \\(\\theta\\) \\) using: \\[ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] Max range: Occurs when \\( \\(\\sin(2\\theta) = 1\\) \\) , i.e., \\( \\(\\theta = 45^\\circ\\) \\) . Effect of velocity: Range increases quadratically with initial velocity. Effect of gravity: Range decreases inversely with gravitational acceleration.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"In real-world situations: - Air resistance reduces range and shifts optimal angle < \\( \\(45^\\circ\\) \\) . - Uneven terrain alters landing height, changing total time of flight. - Wind can either assist or hinder horizontal displacement. - Applications include sports (e.g., basketball, soccer), military ballistics, and spaceflight trajectory planning.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Below is a Python implementation to visualize how the range depends on the angle of projection.","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-code","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0 = 30 # m/s (initial velocity) # Angle values from 0\u00b0 to 90\u00b0 angles_deg = np.linspace(0, 90, 500) angles_rad = np.radians(angles_deg) # Compute range for each angle ranges = (v0**2 * np.sin(2 * angles_rad)) / g # Plotting plt.figure(figsize=(10, 6)) plt.plot(angles_deg, ranges, color='blue', label=f'v0 = {v0} m/s') plt.axvline(45, color='red', linestyle='--', label='Max range at 45\u00b0') plt.title('Projectile Range vs Angle of Projection', fontsize=16) plt.xlabel('Angle (degrees)', fontsize=14) plt.ylabel('Range (meters)', fontsize=14) plt.grid(True, linestyle='--', alpha=0.7) plt.legend() plt.tight_layout() plt.show()","title":"Python Code"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The equation governing the motion of a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] Where: - \\theta(t) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(g\\) is gravitational acceleration, - \\(L\\) is the length of the pendulum, - \\(A\\) is the amplitude of the driving force, - \\(\\omega\\) is the frequency of the driving force. Small-Angle Approximation For small angles, we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] Then the linearized equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is a second-order linear differential equation with forcing and damping, analogous to the driven damped harmonic oscillator. The solution generally includes: - A transient component (decaying), - A steady-state component with the same frequency as the driving force. Resonance Resonance occurs when the driving frequency \\( \\(\\omega\\) \\) is close to the natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] The response amplitude increases dramatically if damping is small. 2. Analysis of Dynamics To explore full nonlinear behavior, including chaotic dynamics, we must numerically integrate the original equation without small-angle approximation. The effects of parameters: - Damping ( \\( \\(b\\) \\) ): controls how quickly energy is lost. - Driving Amplitude ( \\( \\(A\\) \\) ): higher amplitude may trigger chaotic responses. - Driving Frequency ( \\( \\(\\omega\\) \\) ): near-resonant values increase system energy. Transitions: - Low ( \\(A\\) \\) and ( \\(b\\) \\) : periodic motion. - Moderate ( \\(A\\) \\) : quasiperiodic. - High ( \\(A\\) \\) : chaotic motion. 3. Practical Applications The forced damped pendulum appears in: - Energy harvesting systems (vibrating beams or pendulums), - Suspension bridges (wind-induced oscillations), - Electrical analogs like RLC circuits, - Human movement dynamics (e.g., arm swinging), - Earth\u2019s climate cycles (e.g., Milankovitch cycles). 4. Implementation Below is the Python simulation using the Runge-Kutta method for solving the nonlinear ODE. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # pendulum length (m) b = 0.2 # damping coefficient A = 1.2 # driving force amplitude omega = 2.0 # driving frequency (rad/s) # Time setup t_span = (0, 50) t_eval = np.linspace(*t_span, 10000) # Differential equation system def pendulum(t, y): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions: [theta_0, omega_0] y0 = [0.1, 0.0] # Solve ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract results theta = sol.y[0] omega_ = sol.y[1] time = sol.t # Plot results plt.figure(figsize=(12, 6)) plt.plot(time, theta, label='Angular Displacement (\u03b8)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The equation governing the motion of a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] Where: - \\theta(t) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(g\\) is gravitational acceleration, - \\(L\\) is the length of the pendulum, - \\(A\\) is the amplitude of the driving force, - \\(\\omega\\) is the frequency of the driving force.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles, we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] Then the linearized equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is a second-order linear differential equation with forcing and damping, analogous to the driven damped harmonic oscillator. The solution generally includes: - A transient component (decaying), - A steady-state component with the same frequency as the driving force.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when the driving frequency \\( \\(\\omega\\) \\) is close to the natural frequency: \\[ \\omega_0 = \\sqrt{\\frac{g}{L}} \\] The response amplitude increases dramatically if damping is small.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"To explore full nonlinear behavior, including chaotic dynamics, we must numerically integrate the original equation without small-angle approximation. The effects of parameters: - Damping ( \\( \\(b\\) \\) ): controls how quickly energy is lost. - Driving Amplitude ( \\( \\(A\\) \\) ): higher amplitude may trigger chaotic responses. - Driving Frequency ( \\( \\(\\omega\\) \\) ): near-resonant values increase system energy. Transitions: - Low ( \\(A\\) \\) and ( \\(b\\) \\) : periodic motion. - Moderate ( \\(A\\) \\) : quasiperiodic. - High ( \\(A\\) \\) : chaotic motion.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum appears in: - Energy harvesting systems (vibrating beams or pendulums), - Suspension bridges (wind-induced oscillations), - Electrical analogs like RLC circuits, - Human movement dynamics (e.g., arm swinging), - Earth\u2019s climate cycles (e.g., Milankovitch cycles).","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Below is the Python simulation using the Runge-Kutta method for solving the nonlinear ODE. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # pendulum length (m) b = 0.2 # damping coefficient A = 1.2 # driving force amplitude omega = 2.0 # driving frequency (rad/s) # Time setup t_span = (0, 50) t_eval = np.linspace(*t_span, 10000) # Differential equation system def pendulum(t, y): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions: [theta_0, omega_0] y0 = [0.1, 0.0] # Solve ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Extract results theta = sol.y[0] omega_ = sol.y[1] time = sol.t # Plot results plt.figure(figsize=(12, 6)) plt.plot(time, theta, label='Angular Displacement (\u03b8)') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Forced Damped Pendulum Motion') plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}