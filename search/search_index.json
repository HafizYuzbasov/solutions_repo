{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, though elementary in its structure, provides a substantial basis for studying foundational physical laws. The investigation of how a projectile's range depends on the angle of projection brings together both theoretical and practical insights. This exploration involves not only basic trigonometry and calculus but also reflects a wide variety of real-world applications ranging from sports to aerospace dynamics. 1. Theoretical Foundation Projectile motion can be described by Newton's second law and the kinematic equations. Assuming no air resistance, the only force acting on the object (after it's projected) is gravity. Governing Equations The equations of motion in the x and y directions can be derived from: \\[ \\frac{d^2x}{dt^2} = 0 \\Rightarrow x(t) = v_0 \\cos(\\theta) t \\] \\[ \\frac{d^2y}{dt^2} = -g \\Rightarrow y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2 \\] Where: - $ v_0 $: Initial velocity - $ \\theta $: Launch angle - $ g \\(: Acceleration due to gravity (\\) 9.81\\ m/s^2$) - $ t $: Time Time of Flight The time at which the projectile returns to the same vertical level is: $$ T = \\frac{2v_0\\sin(\\theta)}{g} $$ Range The horizontal range ( \\(R\\) ) of the projectile is given by: $$ R = \\frac{v_0^2\\sin(2\\theta)}{g} $$ This shows the range is maximum when $ \\theta = 45^\\circ $. 2. Analysis of the Range The horizontal range varies as a function of the angle of projection: - At $ \\theta = 0^\\circ $ or $ 90^\\circ $, range is zero. - Maximum range occurs at $ 45^\\circ $. - Range is symmetric about $ 45^\\circ $. Influence of Parameters: Initial velocity : Quadratically proportional to range. Gravity : Inversely proportional to range. Angle : Influences both the vertical and horizontal motion. 3. Practical Applications Sports : Understanding how to optimize angle and force for maximum throw or jump. Ballistics : Predicting the path of projectiles with drag. Engineering : Simulations of component launches or material drops. Astrophysics : Modeling the launch paths of satellites with corrections. 4. Implementation in Python Below is Python code to simulate projectile motion with different angles and velocities. A. Plot for 50 m/s and Angles 15, 45, 75 Degrees import numpy as np import matplotlib.pyplot as plt def projectile(v0, theta_deg): g = 9.81 theta = np.radians(theta_deg) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 return x, y angles = [15, 45, 75] plt.figure(figsize=(10,6)) for angle in angles: x, y = projectile(50, angle) plt.plot(x, y, label=f'{angle}\\u00b0') plt.title('Projectile Motion for Different Angles (v0 = 50 m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.legend() plt.grid() plt.show() B. Plot for Velocities 30, 40, 50 m/s at 45 Degrees velocities = [30, 40, 50] plt.figure(figsize=(10,6)) for v in velocities: x, y = projectile(v, 45) plt.plot(x, y, label=f'{v} m/s') plt.title('Projectile Motion for Different Velocities (45 Degrees)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.legend() plt.grid() plt.show() Range Visualization and Effects These plots visually confirm: - Greater velocity leads to higher and farther motion. - Angle significantly affects maximum height and range. Limitations and Extensions This model does not account for: - Air resistance : Causes asymmetry and shorter range. - Wind : Alters trajectory path. - Launch height : If not from ground level, modifies equations. Extensions can include solving differential equations with drag force: $$ \\vec{F} = -kv\\vec{v} \\quad \\text{(linear drag)} $$ Using numerical solvers like scipy.integrate.solve_ivp . COLAB Links Projectile Motion: Angle Variation Projectile Motion: Velocity Variation (Please replace \"your-link-1\" and \"your-link-2\" with actual shared Colab URLs.) Summary This notebook illustrates a foundational physics model through both theoretical derivations and computational simulations. It highlights how simple differential equations can model complex physical systems and how varying parameters leads to a deeper understanding of motion under gravity.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, though elementary in its structure, provides a substantial basis for studying foundational physical laws. The investigation of how a projectile's range depends on the angle of projection brings together both theoretical and practical insights. This exploration involves not only basic trigonometry and calculus but also reflects a wide variety of real-world applications ranging from sports to aerospace dynamics.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion can be described by Newton's second law and the kinematic equations. Assuming no air resistance, the only force acting on the object (after it's projected) is gravity.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"The equations of motion in the x and y directions can be derived from: \\[ \\frac{d^2x}{dt^2} = 0 \\Rightarrow x(t) = v_0 \\cos(\\theta) t \\] \\[ \\frac{d^2y}{dt^2} = -g \\Rightarrow y(t) = v_0 \\sin(\\theta) t - \\frac{1}{2}gt^2 \\] Where: - $ v_0 $: Initial velocity - $ \\theta $: Launch angle - $ g \\(: Acceleration due to gravity (\\) 9.81\\ m/s^2$) - $ t $: Time","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The time at which the projectile returns to the same vertical level is: $$ T = \\frac{2v_0\\sin(\\theta)}{g} $$","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range","text":"The horizontal range ( \\(R\\) ) of the projectile is given by: $$ R = \\frac{v_0^2\\sin(2\\theta)}{g} $$ This shows the range is maximum when $ \\theta = 45^\\circ $.","title":"Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The horizontal range varies as a function of the angle of projection: - At $ \\theta = 0^\\circ $ or $ 90^\\circ $, range is zero. - Maximum range occurs at $ 45^\\circ $. - Range is symmetric about $ 45^\\circ $.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-parameters","text":"Initial velocity : Quadratically proportional to range. Gravity : Inversely proportional to range. Angle : Influences both the vertical and horizontal motion.","title":"Influence of Parameters:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : Understanding how to optimize angle and force for maximum throw or jump. Ballistics : Predicting the path of projectiles with drag. Engineering : Simulations of component launches or material drops. Astrophysics : Modeling the launch paths of satellites with corrections.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-in-python","text":"Below is Python code to simulate projectile motion with different angles and velocities.","title":"4. Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#a-plot-for-50-ms-and-angles-15-45-75-degrees","text":"import numpy as np import matplotlib.pyplot as plt def projectile(v0, theta_deg): g = 9.81 theta = np.radians(theta_deg) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, num=500) x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 return x, y angles = [15, 45, 75] plt.figure(figsize=(10,6)) for angle in angles: x, y = projectile(50, angle) plt.plot(x, y, label=f'{angle}\\u00b0') plt.title('Projectile Motion for Different Angles (v0 = 50 m/s)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.legend() plt.grid() plt.show()","title":"A. Plot for 50 m/s and Angles 15, 45, 75 Degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_1/#b-plot-for-velocities-30-40-50-ms-at-45-degrees","text":"velocities = [30, 40, 50] plt.figure(figsize=(10,6)) for v in velocities: x, y = projectile(v, 45) plt.plot(x, y, label=f'{v} m/s') plt.title('Projectile Motion for Different Velocities (45 Degrees)') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.legend() plt.grid() plt.show()","title":"B. Plot for Velocities 30, 40, 50 m/s at 45 Degrees"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-visualization-and-effects","text":"These plots visually confirm: - Greater velocity leads to higher and farther motion. - Angle significantly affects maximum height and range.","title":"Range Visualization and Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-and-extensions","text":"This model does not account for: - Air resistance : Causes asymmetry and shorter range. - Wind : Alters trajectory path. - Launch height : If not from ground level, modifies equations. Extensions can include solving differential equations with drag force: $$ \\vec{F} = -kv\\vec{v} \\quad \\text{(linear drag)} $$ Using numerical solvers like scipy.integrate.solve_ivp .","title":"Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#colab-links","text":"Projectile Motion: Angle Variation Projectile Motion: Velocity Variation (Please replace \"your-link-1\" and \"your-link-2\" with actual shared Colab URLs.)","title":"COLAB Links"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary","text":"This notebook illustrates a foundational physics model through both theoretical derivations and computational simulations. It highlights how simple differential equations can model complex physical systems and how varying parameters leads to a deeper understanding of motion under gravity.","title":"Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is a nonlinear oscillator that exhibits rich dynamical behavior. It is modeled by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the driving force \\(\\omega\\) : Frequency of the driving force This equation combines restoring force ( \\(\\sin\\theta\\) ), linear damping ( \\(b \\, d\\theta/dt\\) ), and a periodic driving force ( \\(A \\cos(\\omega t)\\) ). 1.1 Linearization for Small Angles For small oscillations, where \\(\\theta \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] The equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is the classic linear driven damped harmonic oscillator equation. 1.2 Resonance Behavior In steady-state, the solution for \\(\\theta(t)\\) takes the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] where: \\(\\Theta\\) : Amplitude of oscillation \\(\\delta\\) : Phase shift The amplitude is given by: \\[ \\Theta(\\omega) = \\frac{A}{\\sqrt{ \\left( \\frac{g}{L} - \\omega^2 \\right)^2 + (b\\omega)^2 }} \\] This amplitude is maximized when \\(\\omega \\approx \\sqrt{g/L}\\) , the natural frequency of the undamped pendulum, i.e., resonance occurs when the driving frequency matches the natural frequency. 2. Analysis of Dynamics Unlike the linear approximation, the full nonlinear equation (with \\(\\sin\\theta\\) intact) exhibits complex behavior including: Periodic motion Quasiperiodic motion Chaotic behavior These depend sensitively on parameters \\(A\\) , \\(b\\) , and \\(\\omega\\) . 2.1 Parameter Effects Damping ( \\(b\\) ) : High damping suppresses motion; low damping allows oscillations and chaos. Driving Amplitude ( \\(A\\) ) : Larger \\(A\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Influences resonance and period-doubling bifurcations. 2.2 Chaos and Nonlinearity For sufficiently large \\(A\\) and small \\(b\\) , the motion becomes unpredictable. Small changes in initial conditions result in drastically different outcomes\u2014a hallmark of chaos . Phase diagrams show the evolution of \\((\\theta, \\dot{\\theta})\\) . Poincar\u00e9 sections sample the system at regular intervals (e.g., each period \\(T = 2\\pi/\\omega\\) ). Bifurcation diagrams show how the long-term behavior changes with \\(A\\) or \\(\\omega\\) . 3. Practical Applications The forced damped pendulum is a model for many real systems: Energy harvesting : Devices that convert mechanical vibration into electrical energy. Mechanical systems : Bridges and buildings under wind or seismic driving. Electrical analogs : Driven RLC circuits exhibit identical mathematical behavior. Biological systems : Models of cardiac rhythms and walking gait. 4. Computational Implementation To simulate the full nonlinear dynamics, we solve the second-order ODE numerically using the Runge-Kutta method. 4.1 Python Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.5 # damping coefficient A = 1.2 # driving amplitude omega = 2/3 # driving frequency # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # ODE function def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -b * omega_theta - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 omega0 = 0.0 sol = solve_ivp(pendulum, t_span, [theta0, omega0], t_eval=t_eval) # Plot time series plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a nonlinear oscillator that exhibits rich dynamical behavior. It is modeled by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the driving force \\(\\omega\\) : Frequency of the driving force This equation combines restoring force ( \\(\\sin\\theta\\) ), linear damping ( \\(b \\, d\\theta/dt\\) ), and a periodic driving force ( \\(A \\cos(\\omega t)\\) ).","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-linearization-for-small-angles","text":"For small oscillations, where \\(\\theta \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] The equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is the classic linear driven damped harmonic oscillator equation.","title":"1.1 Linearization for Small Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-behavior","text":"In steady-state, the solution for \\(\\theta(t)\\) takes the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] where: \\(\\Theta\\) : Amplitude of oscillation \\(\\delta\\) : Phase shift The amplitude is given by: \\[ \\Theta(\\omega) = \\frac{A}{\\sqrt{ \\left( \\frac{g}{L} - \\omega^2 \\right)^2 + (b\\omega)^2 }} \\] This amplitude is maximized when \\(\\omega \\approx \\sqrt{g/L}\\) , the natural frequency of the undamped pendulum, i.e., resonance occurs when the driving frequency matches the natural frequency.","title":"1.2 Resonance Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Unlike the linear approximation, the full nonlinear equation (with \\(\\sin\\theta\\) intact) exhibits complex behavior including: Periodic motion Quasiperiodic motion Chaotic behavior These depend sensitively on parameters \\(A\\) , \\(b\\) , and \\(\\omega\\) .","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-parameter-effects","text":"Damping ( \\(b\\) ) : High damping suppresses motion; low damping allows oscillations and chaos. Driving Amplitude ( \\(A\\) ) : Larger \\(A\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Influences resonance and period-doubling bifurcations.","title":"2.1 Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-chaos-and-nonlinearity","text":"For sufficiently large \\(A\\) and small \\(b\\) , the motion becomes unpredictable. Small changes in initial conditions result in drastically different outcomes\u2014a hallmark of chaos . Phase diagrams show the evolution of \\((\\theta, \\dot{\\theta})\\) . Poincar\u00e9 sections sample the system at regular intervals (e.g., each period \\(T = 2\\pi/\\omega\\) ). Bifurcation diagrams show how the long-term behavior changes with \\(A\\) or \\(\\omega\\) .","title":"2.2 Chaos and Nonlinearity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum is a model for many real systems: Energy harvesting : Devices that convert mechanical vibration into electrical energy. Mechanical systems : Bridges and buildings under wind or seismic driving. Electrical analogs : Driven RLC circuits exhibit identical mathematical behavior. Biological systems : Models of cardiac rhythms and walking gait.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation","text":"To simulate the full nonlinear dynamics, we solve the second-order ODE numerically using the Runge-Kutta method.","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-python-code","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.5 # damping coefficient A = 1.2 # driving amplitude omega = 2/3 # driving frequency # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # ODE function def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -b * omega_theta - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 omega0 = 0.0 sol = solve_ivp(pendulum, t_span, [theta0, omega0], t_eval=t_eval) # Plot time series plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show()","title":"4.1 Python Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius Derivation, Simulation, and Application of Kepler's Third Law 1. Introduction The relationship between the orbital period \\(T\\) and the orbital radius \\(r\\) of celestial bodies is described by Kepler's Third Law . It was later derived using Newton's Law of Gravitation , providing a deep connection between gravity and orbital motion. In this document, we: - Derive the relationship mathematically, - Simulate the relation using planetary data, - Calculate the mass of the Earth and Sun using Kepler\u2019s Law, - Discuss the law's application to elliptical orbits. 2. Derivation of Kepler\u2019s Third Law for Circular Orbits Starting with Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] The centripetal force needed for circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Setting them equal (gravity provides centripetal force): \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplifying: \\[ v^2 = \\frac{G M}{r} \\] The orbital period \\(T\\) relates to velocity \\(v\\) by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r} \\] Expanding: \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r} \\] Multiplying both sides by \\(r\\) : \\[ 4\\pi^2 r^3 = G M T^2 \\] Finally, solving for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus: \\[ \\boxed{T^2 \\propto r^3} \\] 3. Simulation and Plotting \\(T^2\\) vs \\(r^3\\) We verify the relationship using planetary data (Mercury, Venus, Earth, Mars). 3.1 Python Code # Import necessary libraries import numpy as np import matplotlib.pyplot as plt # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars'] r_AU = np.array([0.387, 0.723, 1.000, 1.524]) # Orbital radii (AU) T_years = np.array([0.241, 0.615, 1.000, 1.881]) # Orbital periods (years) # Compute r^3 and T^2 r_cubed = r_AU**3 T_squared = T_years**2 # Plotting plt.figure(figsize=(8,6)) plt.plot(r_cubed, T_squared, 'o-', color='blue', markersize=8) for i, planet in enumerate(planets): plt.text(r_cubed[i]*1.02, T_squared[i]*0.98, planet, fontsize=10) plt.xlabel(r\"$r^3$ (AU$^3$)\", fontsize=14) plt.ylabel(r\"$T^2$ (years$^2$)\", fontsize=14) plt.title(r\"Kepler's Third Law: $T^2$ vs $r^3$\", fontsize=16) plt.grid(True) plt.show() 3.2 Interpretation The plot of \\(T^2\\) against \\(r^3\\) is a straight line , confirming that \\(T^2 \\propto r^3\\) . This matches the theoretical derivation and validates Kepler\u2019s Third Law . 4. Applications: Mass Calculations 4.1 Finding the Mass of the Sun Using Earth's orbit: Orbital radius: \\(r = 1.496 \\times 10^{11}\\ \\text{m}\\) Orbital period: \\(T = 3.154 \\times 10^{7}\\ \\text{s}\\) The mass of the Sun is given by: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] where \\(G = 6.67430 \\times 10^{-11}\\ \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) . Code to Find Mass of Sun # Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) r_earth = 1.496e11 # Orbital radius of Earth (m) T_earth = 3.154e7 # Orbital period of Earth (s) # Calculate Mass of Sun M_sun = (4 * np.pi**2 * r_earth**3) / (G * T_earth**2) print(f\"Mass of the Sun = {M_sun:.3e} kg\") Result: Mass of the Sun \\(\\approx 1.99 \\times 10^{30}\\ \\text{kg}\\) 4.2 Finding the Mass of the Earth Using the Moon's orbit: Orbital radius: \\(r = 3.844 \\times 10^{8}\\ \\text{m}\\) Orbital period: \\(T = 2.3606 \\times 10^{6}\\ \\text{s}\\) Code to Find Mass of Earth # Moon orbit data r_moon = 3.844e8 # Orbital radius of Moon (m) T_moon = 2.3606e6 # Orbital period of Moon (s) # Calculate Mass of Earth M_earth = (4 * np.pi**2 * r_moon**3) / (G * T_moon**2) print(f\"Mass of the Earth = {M_earth:.3e} kg\") Result: Mass of the Earth \\(\\approx 5.97 \\times 10^{24}\\ \\text{kg}\\) 5. Extension: Elliptical Orbits For elliptical orbits, Kepler\u2019s Third Law becomes: \\[ T^2 = \\frac{4\\pi^2}{G M} a^3 \\] where \\(a\\) is the semi-major axis of the ellipse. Thus, \\(T^2\\) is proportional to \\(a^3\\) even for non-circular (elliptical) orbits.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-simulation-and-application-of-keplers-third-law","text":"","title":"Derivation, Simulation, and Application of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-introduction","text":"The relationship between the orbital period \\(T\\) and the orbital radius \\(r\\) of celestial bodies is described by Kepler's Third Law . It was later derived using Newton's Law of Gravitation , providing a deep connection between gravity and orbital motion. In this document, we: - Derive the relationship mathematically, - Simulate the relation using planetary data, - Calculate the mass of the Earth and Sun using Kepler\u2019s Law, - Discuss the law's application to elliptical orbits.","title":"1. Introduction"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-derivation-of-keplers-third-law-for-circular-orbits","text":"Starting with Newton\u2019s Law of Gravitation : \\[ F_{\\text{gravity}} = \\frac{G M m}{r^2} \\] The centripetal force needed for circular motion is: \\[ F_{\\text{centripetal}} = \\frac{m v^2}{r} \\] Setting them equal (gravity provides centripetal force): \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplifying: \\[ v^2 = \\frac{G M}{r} \\] The orbital period \\(T\\) relates to velocity \\(v\\) by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting: \\[ \\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r} \\] Expanding: \\[ \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r} \\] Multiplying both sides by \\(r\\) : \\[ 4\\pi^2 r^3 = G M T^2 \\] Finally, solving for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus: \\[ \\boxed{T^2 \\propto r^3} \\]","title":"2. Derivation of Kepler\u2019s Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-simulation-and-plotting-t2-vs-r3","text":"We verify the relationship using planetary data (Mercury, Venus, Earth, Mars).","title":"3. Simulation and Plotting \\(T^2\\) vs \\(r^3\\)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#31-python-code","text":"# Import necessary libraries import numpy as np import matplotlib.pyplot as plt # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars'] r_AU = np.array([0.387, 0.723, 1.000, 1.524]) # Orbital radii (AU) T_years = np.array([0.241, 0.615, 1.000, 1.881]) # Orbital periods (years) # Compute r^3 and T^2 r_cubed = r_AU**3 T_squared = T_years**2 # Plotting plt.figure(figsize=(8,6)) plt.plot(r_cubed, T_squared, 'o-', color='blue', markersize=8) for i, planet in enumerate(planets): plt.text(r_cubed[i]*1.02, T_squared[i]*0.98, planet, fontsize=10) plt.xlabel(r\"$r^3$ (AU$^3$)\", fontsize=14) plt.ylabel(r\"$T^2$ (years$^2$)\", fontsize=14) plt.title(r\"Kepler's Third Law: $T^2$ vs $r^3$\", fontsize=16) plt.grid(True) plt.show()","title":"3.1 Python Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/#_1","text":"","title":""},{"location":"1%20Physics/2%20Gravity/Problem_1/#32-interpretation","text":"The plot of \\(T^2\\) against \\(r^3\\) is a straight line , confirming that \\(T^2 \\propto r^3\\) . This matches the theoretical derivation and validates Kepler\u2019s Third Law .","title":"3.2 Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-applications-mass-calculations","text":"","title":"4. Applications: Mass Calculations"},{"location":"1%20Physics/2%20Gravity/Problem_1/#41-finding-the-mass-of-the-sun","text":"Using Earth's orbit: Orbital radius: \\(r = 1.496 \\times 10^{11}\\ \\text{m}\\) Orbital period: \\(T = 3.154 \\times 10^{7}\\ \\text{s}\\) The mass of the Sun is given by: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] where \\(G = 6.67430 \\times 10^{-11}\\ \\text{m}^3 \\text{kg}^{-1} \\text{s}^{-2}\\) .","title":"4.1 Finding the Mass of the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#code-to-find-mass-of-sun","text":"# Constants G = 6.67430e-11 # Gravitational constant (m^3/kg/s^2) r_earth = 1.496e11 # Orbital radius of Earth (m) T_earth = 3.154e7 # Orbital period of Earth (s) # Calculate Mass of Sun M_sun = (4 * np.pi**2 * r_earth**3) / (G * T_earth**2) print(f\"Mass of the Sun = {M_sun:.3e} kg\") Result: Mass of the Sun \\(\\approx 1.99 \\times 10^{30}\\ \\text{kg}\\)","title":"Code to Find Mass of Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#42-finding-the-mass-of-the-earth","text":"Using the Moon's orbit: Orbital radius: \\(r = 3.844 \\times 10^{8}\\ \\text{m}\\) Orbital period: \\(T = 2.3606 \\times 10^{6}\\ \\text{s}\\)","title":"4.2 Finding the Mass of the Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#code-to-find-mass-of-earth","text":"# Moon orbit data r_moon = 3.844e8 # Orbital radius of Moon (m) T_moon = 2.3606e6 # Orbital period of Moon (s) # Calculate Mass of Earth M_earth = (4 * np.pi**2 * r_moon**3) / (G * T_moon**2) print(f\"Mass of the Earth = {M_earth:.3e} kg\") Result: Mass of the Earth \\(\\approx 5.97 \\times 10^{24}\\ \\text{kg}\\)","title":"Code to Find Mass of Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extension-elliptical-orbits","text":"For elliptical orbits, Kepler\u2019s Third Law becomes: \\[ T^2 = \\frac{4\\pi^2}{G M} a^3 \\] where \\(a\\) is the semi-major axis of the ellipse. Thus, \\(T^2\\) is proportional to \\(a^3\\) even for non-circular (elliptical) orbits.","title":"5. Extension: Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}