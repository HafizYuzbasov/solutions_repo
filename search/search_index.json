{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a foundational topic in classical physics. When a body is projected into the air under the influence of gravity alone (ideal case), it follows a parabolic path. The analysis of this motion offers insights into kinematics and vector decomposition. 1.1 Assumptions of the Ideal Model To simplify the analysis, we make the following assumptions: The projectile is launched from and lands at the same height. Air resistance is neglected. Gravitational acceleration is constant at \\(g = 9.81 \\, \\text{m/s}^2\\) . The Earth's curvature and rotation are ignored. 1.2 Deriving the Equations of Motion Let a projectile be launched with: Initial speed: \\(v_0\\) Angle of projection: \\(\\theta\\) Decomposing the initial velocity: Horizontal component: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical component: \\(v_{0y} = v_0 \\sin\\theta\\) From kinematics: Horizontal displacement: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ Vertical displacement: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Setting \\(y(t) = 0\\) to find total time of flight: \\[ 0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] Factoring: \\[ t \\left(v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 \\Rightarrow t = 0 \\, \\text{or} \\, t = \\frac{2 v_0 \\sin\\theta}{g} \\] Thus, total flight time is: \\[ T = \\frac{2 v_0 \\sin\\theta}{g} \\] 1.3 The Range of the Projectile The range \\(R\\) is the horizontal distance traveled in time \\(T\\) : \\[ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the key equation governing ideal projectile range. 2. Analysis of the Range 2.1 Angle Dependence The range formula is: \\[ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] The function \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . 2.2 Symmetry Since \\(\\sin(2\\theta) = \\sin(180^\\circ - 2\\theta)\\) , the range is symmetric about \\(\\theta = 45^\\circ\\) . That means angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield the same range. 2.3 Influence of Other Parameters Initial velocity ( \\(v_0\\) ) : $$ R \\propto v_0^2 $$ Doubling the speed increases the range by a factor of 4. Gravity ( \\(g\\) ) : $$ R \\propto \\frac{1}{g} $$ On the Moon (where \\(g \\approx 1.63 \\, \\text{m/s}^2\\) ), projectiles travel much farther. 3. Practical Applications and Extensions 3.1 Applications Sports : Modeling ball trajectories. Engineering : Designing launch systems. Physics/Aerospace : Orbital mechanics and ballistic arcs. 3.2 Limitations of the Ideal Model Ignores air resistance Assumes level ground Neglects spin and lift No wind effects 3.3 Toward Realistic Models Add drag: \\(F_d = -kv\\) Use numerical solvers (e.g., Runge-Kutta) Modify equations for launch/landing height differences 4. Python Implementation This script simulates and plots the range of a projectile as a function of launch angle for various initial velocities. Code import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0_list = [10, 20, 30, 40] # initial velocities # Angle array angles_deg = np.linspace(0, 90, 500) angles_rad = np.radians(angles_deg) # Plot setup plt.figure(figsize=(10, 6)) plt.title(\"Projectile Range vs. Angle of Projection\", fontsize=14) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) # Plotting ranges for each velocity for v0 in v0_list: R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'v\u2080 = {v0} m/s') plt.legend() plt.tight_layout() plt.show()","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a foundational topic in classical physics. When a body is projected into the air under the influence of gravity alone (ideal case), it follows a parabolic path. The analysis of this motion offers insights into kinematics and vector decomposition.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-assumptions-of-the-ideal-model","text":"To simplify the analysis, we make the following assumptions: The projectile is launched from and lands at the same height. Air resistance is neglected. Gravitational acceleration is constant at \\(g = 9.81 \\, \\text{m/s}^2\\) . The Earth's curvature and rotation are ignored.","title":"1.1 Assumptions of the Ideal Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-deriving-the-equations-of-motion","text":"Let a projectile be launched with: Initial speed: \\(v_0\\) Angle of projection: \\(\\theta\\) Decomposing the initial velocity: Horizontal component: \\(v_{0x} = v_0 \\cos\\theta\\) Vertical component: \\(v_{0y} = v_0 \\sin\\theta\\) From kinematics: Horizontal displacement: $$ x(t) = v_0 \\cos\\theta \\cdot t $$ Vertical displacement: $$ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ Setting \\(y(t) = 0\\) to find total time of flight: \\[ 0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] Factoring: \\[ t \\left(v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 \\Rightarrow t = 0 \\, \\text{or} \\, t = \\frac{2 v_0 \\sin\\theta}{g} \\] Thus, total flight time is: \\[ T = \\frac{2 v_0 \\sin\\theta}{g} \\]","title":"1.2 Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-the-range-of-the-projectile","text":"The range \\(R\\) is the horizontal distance traveled in time \\(T\\) : \\[ R = x(T) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] This is the key equation governing ideal projectile range.","title":"1.3 The Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-angle-dependence","text":"The range formula is: \\[ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] The function \\(\\sin(2\\theta)\\) reaches its maximum value of 1 when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) .","title":"2.1 Angle Dependence"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-symmetry","text":"Since \\(\\sin(2\\theta) = \\sin(180^\\circ - 2\\theta)\\) , the range is symmetric about \\(\\theta = 45^\\circ\\) . That means angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield the same range.","title":"2.2 Symmetry"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-influence-of-other-parameters","text":"Initial velocity ( \\(v_0\\) ) : $$ R \\propto v_0^2 $$ Doubling the speed increases the range by a factor of 4. Gravity ( \\(g\\) ) : $$ R \\propto \\frac{1}{g} $$ On the Moon (where \\(g \\approx 1.63 \\, \\text{m/s}^2\\) ), projectiles travel much farther.","title":"2.3 Influence of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications-and-extensions","text":"","title":"3. Practical Applications and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-applications","text":"Sports : Modeling ball trajectories. Engineering : Designing launch systems. Physics/Aerospace : Orbital mechanics and ballistic arcs.","title":"3.1 Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-limitations-of-the-ideal-model","text":"Ignores air resistance Assumes level ground Neglects spin and lift No wind effects","title":"3.2 Limitations of the Ideal Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-toward-realistic-models","text":"Add drag: \\(F_d = -kv\\) Use numerical solvers (e.g., Runge-Kutta) Modify equations for launch/landing height differences","title":"3.3 Toward Realistic Models"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-python-implementation","text":"This script simulates and plots the range of a projectile as a function of launch angle for various initial velocities.","title":"4. Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#code","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # m/s^2 v0_list = [10, 20, 30, 40] # initial velocities # Angle array angles_deg = np.linspace(0, 90, 500) angles_rad = np.radians(angles_deg) # Plot setup plt.figure(figsize=(10, 6)) plt.title(\"Projectile Range vs. Angle of Projection\", fontsize=14) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) # Plotting ranges for each velocity for v0 in v0_list: R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'v\u2080 = {v0} m/s') plt.legend() plt.tight_layout() plt.show()","title":"Code"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is a nonlinear oscillator that exhibits rich dynamical behavior. It is modeled by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the driving force \\(\\omega\\) : Frequency of the driving force This equation combines restoring force ( \\(\\sin\\theta\\) ), linear damping ( \\(b \\, d\\theta/dt\\) ), and a periodic driving force ( \\(A \\cos(\\omega t)\\) ). 1.1 Linearization for Small Angles For small oscillations, where \\(\\theta \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] The equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is the classic linear driven damped harmonic oscillator equation. 1.2 Resonance Behavior In steady-state, the solution for \\(\\theta(t)\\) takes the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] where: \\(\\Theta\\) : Amplitude of oscillation \\(\\delta\\) : Phase shift The amplitude is given by: \\[ \\Theta(\\omega) = \\frac{A}{\\sqrt{ \\left( \\frac{g}{L} - \\omega^2 \\right)^2 + (b\\omega)^2 }} \\] This amplitude is maximized when \\(\\omega \\approx \\sqrt{g/L}\\) , the natural frequency of the undamped pendulum, i.e., resonance occurs when the driving frequency matches the natural frequency. 2. Analysis of Dynamics Unlike the linear approximation, the full nonlinear equation (with \\(\\sin\\theta\\) intact) exhibits complex behavior including: Periodic motion Quasiperiodic motion Chaotic behavior These depend sensitively on parameters \\(A\\) , \\(b\\) , and \\(\\omega\\) . 2.1 Parameter Effects Damping ( \\(b\\) ) : High damping suppresses motion; low damping allows oscillations and chaos. Driving Amplitude ( \\(A\\) ) : Larger \\(A\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Influences resonance and period-doubling bifurcations. 2.2 Chaos and Nonlinearity For sufficiently large \\(A\\) and small \\(b\\) , the motion becomes unpredictable. Small changes in initial conditions result in drastically different outcomes\u2014a hallmark of chaos . Phase diagrams show the evolution of \\((\\theta, \\dot{\\theta})\\) . Poincar\u00e9 sections sample the system at regular intervals (e.g., each period \\(T = 2\\pi/\\omega\\) ). Bifurcation diagrams show how the long-term behavior changes with \\(A\\) or \\(\\omega\\) . 3. Practical Applications The forced damped pendulum is a model for many real systems: Energy harvesting : Devices that convert mechanical vibration into electrical energy. Mechanical systems : Bridges and buildings under wind or seismic driving. Electrical analogs : Driven RLC circuits exhibit identical mathematical behavior. Biological systems : Models of cardiac rhythms and walking gait. 4. Computational Implementation To simulate the full nonlinear dynamics, we solve the second-order ODE numerically using the Runge-Kutta method. 4.1 Python Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.5 # damping coefficient A = 1.2 # driving amplitude omega = 2/3 # driving frequency # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # ODE function def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -b * omega_theta - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 omega0 = 0.0 sol = solve_ivp(pendulum, t_span, [theta0, omega0], t_eval=t_eval) # Plot time series plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a nonlinear oscillator that exhibits rich dynamical behavior. It is modeled by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: \\(\\theta(t)\\) : Angular displacement (radians) \\(b\\) : Damping coefficient \\(g\\) : Gravitational acceleration \\(L\\) : Length of the pendulum \\(A\\) : Amplitude of the driving force \\(\\omega\\) : Frequency of the driving force This equation combines restoring force ( \\(\\sin\\theta\\) ), linear damping ( \\(b \\, d\\theta/dt\\) ), and a periodic driving force ( \\(A \\cos(\\omega t)\\) ).","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-linearization-for-small-angles","text":"For small oscillations, where \\(\\theta \\ll 1\\) , we can use the approximation: \\[ \\sin\\theta \\approx \\theta \\] The equation becomes: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is the classic linear driven damped harmonic oscillator equation.","title":"1.1 Linearization for Small Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-behavior","text":"In steady-state, the solution for \\(\\theta(t)\\) takes the form: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\delta) \\] where: \\(\\Theta\\) : Amplitude of oscillation \\(\\delta\\) : Phase shift The amplitude is given by: \\[ \\Theta(\\omega) = \\frac{A}{\\sqrt{ \\left( \\frac{g}{L} - \\omega^2 \\right)^2 + (b\\omega)^2 }} \\] This amplitude is maximized when \\(\\omega \\approx \\sqrt{g/L}\\) , the natural frequency of the undamped pendulum, i.e., resonance occurs when the driving frequency matches the natural frequency.","title":"1.2 Resonance Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Unlike the linear approximation, the full nonlinear equation (with \\(\\sin\\theta\\) intact) exhibits complex behavior including: Periodic motion Quasiperiodic motion Chaotic behavior These depend sensitively on parameters \\(A\\) , \\(b\\) , and \\(\\omega\\) .","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-parameter-effects","text":"Damping ( \\(b\\) ) : High damping suppresses motion; low damping allows oscillations and chaos. Driving Amplitude ( \\(A\\) ) : Larger \\(A\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Influences resonance and period-doubling bifurcations.","title":"2.1 Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-chaos-and-nonlinearity","text":"For sufficiently large \\(A\\) and small \\(b\\) , the motion becomes unpredictable. Small changes in initial conditions result in drastically different outcomes\u2014a hallmark of chaos . Phase diagrams show the evolution of \\((\\theta, \\dot{\\theta})\\) . Poincar\u00e9 sections sample the system at regular intervals (e.g., each period \\(T = 2\\pi/\\omega\\) ). Bifurcation diagrams show how the long-term behavior changes with \\(A\\) or \\(\\omega\\) .","title":"2.2 Chaos and Nonlinearity"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum is a model for many real systems: Energy harvesting : Devices that convert mechanical vibration into electrical energy. Mechanical systems : Bridges and buildings under wind or seismic driving. Electrical analogs : Driven RLC circuits exhibit identical mathematical behavior. Biological systems : Models of cardiac rhythms and walking gait.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation","text":"To simulate the full nonlinear dynamics, we solve the second-order ODE numerically using the Runge-Kutta method.","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-python-code","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity (m/s^2) L = 1.0 # length of pendulum (m) b = 0.5 # damping coefficient A = 1.2 # driving amplitude omega = 2/3 # driving frequency # Time span t_span = (0, 100) t_eval = np.linspace(*t_span, 5000) # ODE function def pendulum(t, y): theta, omega_theta = y dtheta_dt = omega_theta domega_dt = -b * omega_theta - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions theta0 = 0.2 omega0 = 0.0 sol = solve_ivp(pendulum, t_span, [theta0, omega0], t_eval=t_eval) # Plot time series plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show()","title":"4.1 Python Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}